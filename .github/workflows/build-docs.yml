name: Build documentation

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  pages: write

env:
  INSTANCE: 'Dorkag/dorkag'
  ARTIFACT: 'webHelpDORKAG2-all.zip'
  DOCKER_VERSION: '241.18775'
  ALGOLIA_ARTIFACT: 'algolia-indexes-DORKAG.zip'
  ALGOLIA_APP_NAME: '0ZSRMCDHQ9'
  ALGOLIA_INDEX_NAME: 'Dorkag'
  ALGOLIA_KEY: '${{ secrets.ALGOLIA_KEY }}'
  CONFIG_JSON_PRODUCT: 'Dorkag'
  CONFIG_JSON_VERSION: '2'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better change detection

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          artifact: ${{ env.ARTIFACT }}
          docker-version: ${{ env.DOCKER_VERSION }}
        env:
          ALGOLIA_KEY: ${{ secrets.ALGOLIA_KEY }}

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            artifacts/${{ env.ARTIFACT }}
            artifacts/report.json
            artifacts/${{ env.ALGOLIA_ARTIFACT }}
          retention-days: 7
          compression-level: 9  # Maximum compression
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Test documentation
        uses: JetBrains/writerside-checker-action@v1
        with:
          instance: ${{ env.INSTANCE }}

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq '${{ env.ARTIFACT }}' -d dir

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-indexes:
    needs: [ build, test, deploy ]
    runs-on: ubuntu-latest
    container:
      image: registry.jetbrains.team/p/writerside/builder/algolia-publisher:2.0.32-3
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
      - name: Unzip artifact
        run: |
          unzip -O UTF-8 -qq '${{ env.ALGOLIA_ARTIFACT }}' -d algolia-indexes
          env algolia-key='${{env.ALGOLIA_KEY}}' java -jar /opt/builder/help-publication-agent.jar \
          update-index \
          --application-name '${{env.ALGOLIA_APP_NAME}}' \
          --index-name '${{env.ALGOLIA_INDEX_NAME}}' \
          --product '${{env.CONFIG_JSON_PRODUCT}}' \
          --version '${{env.CONFIG_JSON_VERSION}}' \
          --index-directory algolia-indexes/ \
          2>&1 | tee algolia-update-index-log.txt

  upload-to-dorka:
    needs: [ build, test, deploy ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Upload Documentation to Dorka Repository
        env:
          DORKA_TOKEN: ${{ secrets.DORKA_UPLOAD_TOKEN }}
        run: |
          # Check if the DORKA_UPLOAD_TOKEN is set
          if [ -z "$DORKA_TOKEN" ]; then
            echo "DORKA_UPLOAD_TOKEN not configured, skipping upload to Dorka repository"
            exit 0
          fi
          
          # Verify artifact exists
          if [ ! -f "artifacts/${{ env.ARTIFACT }}" ]; then
            echo "Artifact not found at artifacts/${{ env.ARTIFACT }}"
            ls -la artifacts/
            exit 1
          fi
          
          # Get the latest release ID for docs-latest tag (if it exists)
          echo "Checking for existing docs-latest release..."
          RELEASE_ID=$(curl -s \
            -H "Authorization: token $DORKA_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/edgafner/dorka/releases/tags/docs-latest \
            | jq -r '.id // empty')
          
          if [ -n "$RELEASE_ID" ]; then
            # Get existing assets to delete the old documentation artifact
            echo "Getting existing assets for release ID: $RELEASE_ID"
            ASSETS=$(curl -s \
              -H "Authorization: token $DORKA_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/edgafner/dorka/releases/$RELEASE_ID/assets)
            
            # Delete existing documentation artifact if present
            ASSET_ID=$(echo "$ASSETS" | jq -r '.[] | select(.name == "${{ env.ARTIFACT }}") | .id // empty')
            if [ -n "$ASSET_ID" ]; then
              echo "Deleting existing documentation artifact (ID: $ASSET_ID)..."
              curl -X DELETE \
                -H "Authorization: token $DORKA_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/edgafner/dorka/releases/assets/$ASSET_ID
            fi
            
            # Update release body with new build info
            echo "Updating existing docs-latest release..."
            curl -X PATCH \
              -H "Authorization: token $DORKA_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/edgafner/dorka/releases/$RELEASE_ID \
              -d '{
                "body": "Automated documentation build from edgafner.github.io\n\nBuild date: '"$(date -u +"%Y-%m-%d %H:%M:%S UTC")"'\nSource commit: '"${{ github.sha }}"'"
              }'
            
            # Get upload URL for the existing release
            UPLOAD_URL=$(curl -s \
              -H "Authorization: token $DORKA_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/edgafner/dorka/releases/$RELEASE_ID \
              | jq -r '.upload_url' | sed 's/{?name,label}//')
          else
            # Create new release with "docs-latest" tag if it doesn't exist
            echo "Creating new docs-latest release..."
            RESPONSE=$(curl -X POST \
              -H "Authorization: token $DORKA_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/edgafner/dorka/releases \
              -d '{
                "tag_name": "docs-latest",
                "target_commitish": "main",
                "name": "Latest Documentation Build",
                "body": "Automated documentation build from edgafner.github.io\n\nBuild date: '"$(date -u +"%Y-%m-%d %H:%M:%S UTC")"'\nSource commit: '"${{ github.sha }}"'",
                "draft": false,
                "prerelease": true
              }')
            
            UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
            
            if [ "$UPLOAD_URL" = "null" ] || [ -z "$UPLOAD_URL" ]; then
              echo "Failed to create release. Response:"
              echo "$RESPONSE"
              exit 1
            fi
          fi
          
          # Upload the documentation artifact
          echo "Uploading documentation artifact..."
          curl -X POST \
            -H "Authorization: token $DORKA_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"artifacts/${{ env.ARTIFACT }}" \
            "${UPLOAD_URL}?name=${{ env.ARTIFACT }}"
          
          echo "Documentation successfully uploaded to Dorka repository (docs-latest release)"